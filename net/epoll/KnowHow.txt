    typedef union epoll_data   
    {  
       void        *ptr;  
       int          fd;  
       uint32_t     u32;  
       uint64_t     u64;  
    } epoll_data_t;  
      
    struct epoll_event   
    {  
       uint32_t     events;      /* Epoll events */   
       epoll_data_t data;        /* User data variable */  
    };  
//  events可以是以下几个宏的集合：
    EPOLLIN： 触发该事件，表示对应的文件描述符上有可读数据。包括对端SOCKET正常关闭)；
    EPOLLOUT：         触发该事件，表示对应的文件描述符上可以写数据；
    EPOLLPRI：           表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；
    EPOLLERR：        表示对应的文件描述符发生错误；
    EPOLLHUP：        表示对应的文件描述符被挂断；
    EPOLLET：           将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。
    EPOLLONESHOT：  只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里。

1.int epoll_create1(int flags);  // flag  = EPOLL_CLOEXEC
  Return Value
  On success, these system calls return a nonnegative file descriptor. On error, -1 is returned, and errno is set to indicate the error.
  Errors
  返回值为-1时，errno 这个全局变量会被设置的值
  EINVAL
      size is not positive. 
  EINVAL
      (epoll_create1()) Invalid value specified in flags. 
  EMFILE
      The per-user limit on the number of epoll instances imposed by /proc/sys/fs/epoll/max_user_instances was encountered. See epoll(7) for further details. --超过fd最大值
  ENFILE
      The system limit on the total number of open files has been reached. 
  ENOMEM
      There was insufficient memory to create the kernel object.

2.int epoll_ctl(int epfd, int op, int fd, struct epoll_event*event); 
  op:
          EPOLL_CTL_ADD：      注册新的fd到epfd中；
          EPOLL_CTL_MOD：      修改已经注册的fd的监听事件；
          EPOLL_CTL_DEL：       从epfd中删除一个fd；
  fd ：   需要监听的fd，
  event ：告诉内核需要监听什么事件

3..等待事件触发，当超过timeout还没有事件触发时，就超时。
   int epoll_wait(int epfd, struct epoll_event * events, intmaxevents, int timeout);